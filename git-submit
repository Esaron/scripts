#!/bin/bash

force=0
for i in `seq 1 $#`
do
  eval curarg=\$$i
  if [ "$curarg" = "-f" ]
  then
    force=1
  else
    topic=$curarg
  fi
done

remote="$(git config --get submit.remote)"
current="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)"
upstream="$(git rev-parse --symbolic-full-name --abbrev-ref @{u})"
parent="${upstream#*/}" # trim the leading remote name portion
num_submit="$(git rev-list @{u}.. | wc -l)"
reviewers="$(git config --get-all submit.reviewer) $(git config --get-all branch.$current.submit-reviewer)"
noreview="$(git config --get-all submit.noreview) $(git config --get-all branch.$current.submit-noreview)"

_splitNoReview() {
  echo "$noreview" | sed 's/ /\n/g'
}

_joinReviewer() {
  yesreviewers=$*
  noreviewers=($noreview)
  for noreviewer in "${noreviewers[@]}"
  do
    yesreviewers=$(echo "$yesreviewers" | sed "s/ *$noreviewer *//g")
  done
  if [ -z "$yesreviewers" ]
  then
    echo "r=$yesreviewers" | sed 's/ \+/,r=/g'
  fi
}

_gen_ChangeIdInput() {
  echo "tree `git write-tree`"
  if parent=`git rev-parse "HEAD^0" 2>/dev/null`
  then
    echo "parent $parent"
  fi
  echo "author `git var GIT_AUTHOR_IDENT`"
  echo "committer `git var GIT_COMMITTER_IDENT`"
  echo
  printf '%s' "$clean_message"
}
_gen_ChangeId() {
  _gen_ChangeIdInput |
  git hash-object -t commit --stdin
}

if [ -z "$remote" ]
then
  echo "submit.remote is not set"
  exit 1
fi

if [ -z "$parent" ]
then
  echo "can not determine upstream of current branch"
  exit 1
fi

if [ "$num_submit" -eq 0 ]
then
  echo "nothing found to submit between $current and $upstream"
  exit 0
#elif [ "$num_submit" -ne 1 -a $force -eq 0 ]
#then
#  echo "can only submit a single commit, found $num_submit"
#  exit 1
fi

R=
if [ -n "$reviewers" ]
then
  R=%$(_joinReviewer $reviewers)
  if [ "$R" == "%r=" ]
  then
    R=
  fi
fi

target="$parent"
git pull

if [ "$parent" != "$current" ]
then
  target="$target/$current"
  git push "$remote" HEAD:refs/for/$target$R
else
  if [ -z $topic ]
  then
    topic=`_gen_ChangeId`
  fi
  target="$target/$topic"
  git branch -m $topic && git push "$remote" HEAD:refs/for/$target$R
fi
git branch -vv
